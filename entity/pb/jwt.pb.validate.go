// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: jwt.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on JwtInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JwtInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JwtInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in JwtInfoMultiError, or nil if none found.
func (m *JwtInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *JwtInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sub

	// no validation rules for Iss

	// no validation rules for Exp

	// no validation rules for Nbf

	// no validation rules for Iat

	// no validation rules for Jti

	// no validation rules for Attributes

	if len(errors) > 0 {
		return JwtInfoMultiError(errors)
	}

	return nil
}

// JwtInfoMultiError is an error wrapping multiple validation errors returned
// by JwtInfo.ValidateAll() if the designated constraints aren't met.
type JwtInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JwtInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JwtInfoMultiError) AllErrors() []error { return m }

// JwtInfoValidationError is the validation error returned by JwtInfo.Validate
// if the designated constraints aren't met.
type JwtInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JwtInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JwtInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JwtInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JwtInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JwtInfoValidationError) ErrorName() string { return "JwtInfoValidationError" }

// Error satisfies the builtin error interface
func (e JwtInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJwtInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JwtInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JwtInfoValidationError{}

// Validate checks the field values on SignReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SignReqMultiError, or nil if none found.
func (m *SignReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SignReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetJwtInfo() == nil {
		err := SignReqValidationError{
			field:  "JwtInfo",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetJwtInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignReqValidationError{
					field:  "JwtInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignReqValidationError{
					field:  "JwtInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJwtInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignReqValidationError{
				field:  "JwtInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SignReqMultiError(errors)
	}

	return nil
}

// SignReqMultiError is an error wrapping multiple validation errors returned
// by SignReq.ValidateAll() if the designated constraints aren't met.
type SignReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignReqMultiError) AllErrors() []error { return m }

// SignReqValidationError is the validation error returned by SignReq.Validate
// if the designated constraints aren't met.
type SignReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignReqValidationError) ErrorName() string { return "SignReqValidationError" }

// Error satisfies the builtin error interface
func (e SignReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignReqValidationError{}

// Validate checks the field values on SignResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignRespMultiError, or nil
// if none found.
func (m *SignResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SignResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return SignRespMultiError(errors)
	}

	return nil
}

// SignRespMultiError is an error wrapping multiple validation errors returned
// by SignResp.ValidateAll() if the designated constraints aren't met.
type SignRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignRespMultiError) AllErrors() []error { return m }

// SignRespValidationError is the validation error returned by
// SignResp.Validate if the designated constraints aren't met.
type SignRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignRespValidationError) ErrorName() string { return "SignRespValidationError" }

// Error satisfies the builtin error interface
func (e SignRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignRespValidationError{}

// Validate checks the field values on VerifyReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerifyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VerifyReqMultiError, or nil
// if none found.
func (m *VerifyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 20 {
		err := VerifyReqValidationError{
			field:  "Token",
			reason: "value length must be at least 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VerifyReqMultiError(errors)
	}

	return nil
}

// VerifyReqMultiError is an error wrapping multiple validation errors returned
// by VerifyReq.ValidateAll() if the designated constraints aren't met.
type VerifyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyReqMultiError) AllErrors() []error { return m }

// VerifyReqValidationError is the validation error returned by
// VerifyReq.Validate if the designated constraints aren't met.
type VerifyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyReqValidationError) ErrorName() string { return "VerifyReqValidationError" }

// Error satisfies the builtin error interface
func (e VerifyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyReqValidationError{}

// Validate checks the field values on VerifyResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerifyResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VerifyRespMultiError, or
// nil if none found.
func (m *VerifyResp) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Valid

	if all {
		switch v := interface{}(m.GetJwtInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VerifyRespValidationError{
					field:  "JwtInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VerifyRespValidationError{
					field:  "JwtInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJwtInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyRespValidationError{
				field:  "JwtInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VerifyRespMultiError(errors)
	}

	return nil
}

// VerifyRespMultiError is an error wrapping multiple validation errors
// returned by VerifyResp.ValidateAll() if the designated constraints aren't met.
type VerifyRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyRespMultiError) AllErrors() []error { return m }

// VerifyRespValidationError is the validation error returned by
// VerifyResp.Validate if the designated constraints aren't met.
type VerifyRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyRespValidationError) ErrorName() string { return "VerifyRespValidationError" }

// Error satisfies the builtin error interface
func (e VerifyRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyRespValidationError{}
